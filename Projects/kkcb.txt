   ---     CHECKSUM
// Name - Shanay Shukla 
// Regitstration Numnber - 21BCE0874
#include<iostream>
using namespace std;

void calc_bit(char &a,char b,char &c)
{
    if (c=='0')
    {
        if ((a=='1' && b=='0') || (a=='0' && b=='1'))
        {
            a='1';
            c='0';
            return;
        }
        else if (a=='1' && b=='1')
        {
            a='0';
            c='1';
            return;
        }
        else if (a=='0' && b=='0')
        {
            a='0';
            c='0';
            return;
        }
    }
    else if (c=='1')
    {
        if ((a=='1' && b=='0') || (a=='0' && b=='1'))
        {
            a='0';
            c='1';
            return;
        }
        else if (a=='1' && b=='1')
        {
            a='1';
            c='1';
            return;
        }
        else if (a=='0' && b=='0')
        {
            a='1';
            c='0';
            return;
        }
    }
}

int is_carry(char x,char y,char c)
{
    if ((x=='1' && y=='1') || (x=='1' && c=='1') || (c=='1' && y=='1') || (x=='1' && y=='1' && c=='1'))
    {
        return 1;
    }
    return 0;
}


void Sum(string s,string &result)
{
    char carry='0';
    for (int i=s.length()-1;i>=0;i--)
    {
        char temp=result[i];
        calc_bit(result[i],s[i],carry);
        cout<<"The result of addition of "<<temp<<" with "<<s[i]<<" is "<<result[i]<<" with carry "<<carry<<endl;
    }
    if (carry=='1')
    {
        string temp;
        for (int i=0;i<s.length();i++)
        {
            temp=temp+'0';
        }
        for (int i=s.length()-1;i>=0;i--)
        {
            calc_bit(result[i],temp[i],carry);
        }
    }
            cout<<"The result of addition with  "<<s<<" is "<<result<<endl;

}



void Add(string arr[],int n,int l)
{
    string result=arr[0];    
    for (int i=1;i<n;i++)
    {
        Sum(arr[i],result);
    }
    for (int i=l-1;i>=0;i--){
        if (result[i]=='0')
            result[i]='1';
        else    
            result[i]='0';
    }
    cout<<"The Checksum (Final) - "<<result;


}



void Checksum()
{
    int n;
    int l;
    cout<<"Enter the length of the input -"<<endl;
    cin>>l;
    cout<<"Enter the number of inputs"<<endl;
    cin>>n;
    string arr[n];
    for (int i=0;i<n;i++)
    {
        cout<<"Enter string "<<i+1<<endl;
        cin>>arr[i];
    }
    cout<<"You have entered "<<endl;
    for (int i=0;i<n;i++)
    {
       cout<<arr[i]<<" ";
    }
    cout<<endl;
    Add(arr,n,l);
}


int main()
{
    Checksum();
    return 0;
}









___________________








// Hamming Code


#include<stdio.h>
 
void main() {
    int data[10];
    int dataatrec[10],c,c1,c2,c3,i;
 
    printf("Enter 4 bits of data one by one\n");
    scanf("%d",&data[0]);
    scanf("%d",&data[1]);
    scanf("%d",&data[2]);
    scanf("%d",&data[4]);
 
    //Calculation of even parity
    data[6]=data[0]^data[2]^data[4];
data[5]=data[0]^data[1]^data[4];
data[3]=data[0]^data[1]^data[2];
 
printf("\nEncoded data is\n");
for(i=0;i<7;i++)
        printf("%d",data[i]);
 
    printf("\n\nEnter received data bits one by one\n");
    for(i=0;i<7;i++)
        scanf("%d",&dataatrec[i]);
 
    c1=dataatrec[6]^dataatrec[4]^dataatrec[2]^dataatrec[0];
c2=dataatrec[5]^dataatrec[4]^dataatrec[1]^dataatrec[0];
c3=dataatrec[3]^dataatrec[2]^dataatrec[1]^dataatrec[0];
c=c3*4+c2*2+c1 ;
 
    if(c==0) {
printf("\nNo error while transmission of data\n");
    }
else {
printf("\nError on position %d",c);
    
printf("\nData sent : ");
        for(i=0;i<7;i++)
         printf("%d",data[i]);
        
printf("\nData received : ");
        for(i=0;i<7;i++)
         printf("%d",dataatrec[i]);
printf("\nCorrect message is\n");
 
//if errorneous bit is 0 we complement it else vice versa
if(dataatrec[7-c]==0)
dataatrec[7-c]=1;
        else
dataatrec[7-c]=0;
for (i=0;i<7;i++) {
printf("%d",dataatrec[i]);
}
}
}




____________________________




// CRC



#include <iostream>
#include <math.h>
#include <cstring>
using namespace std;

char exor(char a,char b)                                      // perform exor operation
{
if(a==b)
return '0';
else
return '1';
}

void crc(char data[], char key[])
{
int datalen = strlen(data);
int keylen = strlen(key);

for(int i=0;i<keylen-1;i++)                //appending n-1 zeroes to data
data[datalen+i]='0';
data[datalen+keylen-1]='\0';

int codelen = datalen+keylen-1;                //lenght of appended data word

char temp[20],rem[20];

for(int i=0;i<keylen;i++)
rem[i]=data[i];                    //considering n bits of data for each step of binary division/EXOR 

for(int j=keylen;j<=codelen;j++)
{
    for(int i=0;i<keylen;i++)
    temp[i]=rem[i];                // remainder of previous step is divident of current step

    if(rem[0]=='0')                //if 1's bit of remainder is 0 then shift the rem by 1 bit
    {
        for(int i=0;i<keylen-1;i++)
            rem[i]=temp[i+1];
    }
    else                    //else exor the divident with generator key
    {    
        for(int i=0;i<keylen-1;i++)
            rem[i]=exor(temp[i+1],key[i+1]);
            
    }
    if(j!=codelen)
        rem[keylen-1]=data[j];        //appending next bit of data to remainder obtain by division
    else
        rem[keylen-1]='\0';
}
    
for(int i=0;i<keylen-1;i++)
data[datalen+i]=rem[i];                //replace n-1 zeros with n-1 bit CRC
data[codelen]='\0';
cout<<"CRC="<<rem<<"\nDataword="<<data;

}

int main()
{
char key[20],data[20];

cout<<"Enter the data:";
cin>>data;
cout<<"Enter the key:";
cin>>key;

crc(data,key);                        // generate crc

return 0;
}



_____________________________



// Parity 



// Name Shanay Shukla
// Registration Number - 21BCE0874
#include<iostream>
using namespace std;


int calc(int n)
{
    int count=0;
    while(n!=0)
    {
        count=count+1;
        n=n/10;
    }
    return count;
}


bool even(int n,int l)
{
    int count=0;
    while (n!=0)
    {
        if (n%10==1)
        {
            count=count+1;
        }
        n=n/10;
    }
    if (count%2==0)
    {
        return true;
    }
    return false;
    
}



int main()
{
    char c;
    int n;
    cout<<"Enter your choice - (R / T) :"<<endl;
    cin>>c;
    cout<<"Enter the number "<<endl;
    cin>>n;
    int l=calc(n);
    if (c=='R')
    {
            if (even(n,l))
            {
                cout<<"Its Even Parity !!"<<endl;
                
            }
            else
            {
                cout<<"Its Odd Parity !!";
            }
        
    }
    else if (c=='T')
    {
        if (even(n,l))
        {
            n=n*10;
            cout<<" The word is "<<n;
        }
        else{
            n=(n*10)+1;
            cout<<" Correct word is : "<<n;
        }
    }
    return 0;
}




___________________________



// IPV4 Header 


#include <stdio.h>
#include <stdint.h>

int main() {
    // IPv4 Datagram Header
    uint8_t datagram[] = {0x45, 0x00, 0x00, 0x54, 0x00, 0x03, 0x58, 0x50, 0x20, 0x06, 0x00, 0x00, 0x7C, 0x4E, 0x03, 0x02, 0xB4, 0x0E, 0x0F, 0x02};

    // Extracting version and Internet Header Length
    uint8_t version = datagram[0] >> 4;
    uint8_t headerLength = (datagram[0] & 0x0F) * 4;

    // Extracting identification
    uint16_t identification = (datagram[4] << 8) | datagram[5];

    // Extracting source and destination addresses
    uint8_t sourceAddress[4];
    uint8_t destinationAddress[4];

    for (int i = 0; i < 4; i++) {
        sourceAddress[i] = datagram[12 + i];
        destinationAddress[i] = datagram[16 + i];
    }

    // Extracting flag bits, checksum, TTL, and fragmentation offset
    uint8_t flagsAndOffset = datagram[6];
    uint16_t checksum = (datagram[10] << 8) | datagram[11];
    uint8_t ttl = datagram[8];
    uint16_t fragmentationOffset = ((flagsAndOffset & 0x1F) << 8) | datagram[7];

    // Calculating the valid header and size of data
    uint16_t validHeader = headerLength;
    uint16_t dataSize = ((datagram[2] << 8) | datagram[3]) - headerLength;

    // Printing the extracted values
    printf("Version: %d\n", version);
    printf("Header Length: %d bytes\n", headerLength);
    printf("Identification: 0x%04X\n", identification);
    printf("Source Address: %d.%d.%d.%d\n", sourceAddress[0], sourceAddress[1], sourceAddress[2], sourceAddress[3]);
    printf("Destination Address: %d.%d.%d.%d\n", destinationAddress[0], destinationAddress[1], destinationAddress[2], destinationAddress[3]);
    printf("Flag Bits: %d\n", (flagsAndOffset >> 5) & 0x07);
    printf("Checksum: 0x%04X\n", checksum);
    printf("TTL: %d\n", ttl);
    printf("Fragmentation Offset: %d\n", fragmentationOffset);
    printf("Valid Header: %d bytes\n", validHeader);
    printf("Size of Data: %d bytes\n", dataSize);

    return 0;
}




_________________________________



// Stop And Wait


#include <iostream>
#include <cstdlib>
#include <ctime>
#include <unistd.h>
using namespace std;

const int TIMEOUT = 2;

void simulateNetworkDelay()
{
    int delay = rand() % 3;
    sleep(delay);
}

bool transmitFrame(int fno)
{
    simulateNetworkDelay();
    bool lost = (rand() % 10) < 3; 
    if (lost)
    {
        cout << "Frame " << fno << " lost.\n";
        return false;
    }
    else
    {
        cout << "Frame " << fno << " transmitted.\n";
        return true;
    }
}

bool receiveAcknowledgement(int expectedFrame)
{
    simulateNetworkDelay();
    bool lost = (rand() % 10) < 3;
    if (lost)
    {
        cout << "Acknowledgement " << expectedFrame << " lost.\n";
        return false;
    }
    else
    {
        cout << "Acknowledgement " << expectedFrame << " received.\n";
        return true;
    }
}

void simulateStopAndWait(int tot_f)
{
    int nextFrameToSend = 1;
    int expectedFrame = 1;

    while (expectedFrame <= tot_f)
    {
        cout << "Sending Frame: " << nextFrameToSend << endl;
        bool transmitted = transmitFrame(nextFrameToSend);
        if (transmitted)
        {
            bool received = receiveAcknowledgement(expectedFrame);
            if (received)
            {
                cout << "Received Frame: " << nextFrameToSend << " Acknowledgement: " << expectedFrame << endl;
                expectedFrame++;
            }
            else
            {
                cout << "Timeout: Frame " << nextFrameToSend << " not acknowledged. Retransmitting frame.\n";
            }
            nextFrameToSend++;
        }
        else
        {
            cout << "Frame " << nextFrameToSend << " not transmitted. Retransmitting frame.\n";
        }
    }
}

int main()
{
    srand(time(0)); 
    int tot_f;
    cout << "Enter the total number of frames to be sent: ";
    cin >> tot_f;
    simulateStopAndWait(tot_f);
    return 0;
}




________________________________



//  GobackN



#include <stdio.h>
#include <stdbool.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>

//#define WINDOW_SIZE 3
#define TIMEOUT 1

// Simulating sending a frame
bool send_frame(int frame) {
    // Generate a random number between 0 and 1
    double random_num = (double)rand() / RAND_MAX;

    // Simulate frame loss (30% probability)
    if (random_num < 0.3) {
        printf("Frame %d lost\n", frame);
        return false;
    }

    // Simulating transmission time
    printf("Sending frame: %d\n", frame);
    sleep(1);
    return true;
}

// Simulating receiving an acknowledgment
bool receive_ack(int frame) {
    // Generate a random number between 0 and 1
    double random_num = (double)rand() / RAND_MAX;

    // Simulate acknowledgement loss (20% probability)
    if (random_num < 0.2) {
        printf("Acknowledgment for frame %d lost\n", frame);
        return false;
    }

    return true;
}

void go_back_n_arq(int data[], int data_size,int WINDOW_SIZE) {
    int base = 0;
    int next_frame = 0;

    while (base < data_size) {
        // Send frames within the window
        while (next_frame < base + WINDOW_SIZE && next_frame < data_size) {
            if (send_frame(data[next_frame])) {
                printf("Frame %d sent\n", data[next_frame]);
                next_frame++;
            } else {
                printf("Frame %d not sent. Retransmitting...\n", data[next_frame]);
            }
        }

        // Wait for acknowledgments
        int frame_id;
        for (frame_id = base; frame_id < next_frame; frame_id++) {
            bool ack_received = receive_ack(data[frame_id]);
            if (ack_received) {
                printf("Frame %d acknowledged\n", data[frame_id]);
                base++;
            } else {
                printf("Frame %d not acknowledged. Retransmitting...\n", data[frame_id]);
                next_frame = base;  // Go back to the base frame and retransmit all frames in the window
                break;
            }
        }
    }
}



int main() {
    int m;
    printf("Enter m: ");
    scanf("%d",&m);
    printf("Window size: ");
    int x=1;
    for(int i=0;i<m;i++)
    {
        x=x*2;
    }
    printf("%d",x);
    int WINDOW_SIZE=x-1;

    srand(time(NULL));  // Initialize random number generator

    int data[] = {0, 1, 2, 3, 4, 5, 6, 7,0,1,2,3,4,5,6,7};  // Example data to send
    int data_size = sizeof(data) / sizeof(data[0]);

    go_back_n_arq(data, data_size,WINDOW_SIZE);

    return 0;
}


